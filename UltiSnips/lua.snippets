snippet forpairs "for i,v in pairs()" bA
for ${1:i},${2:v} in pairs(${3:table}) do
	${0}
end
endsnippet

snippet if "if ... then .. end" bA
if ${1:CONDITION} then
	${0}
end
endsnippet

snippet elseif "elseif ... then" bA
elseif ${1:CONDITION} then
	${0}
end
endsnippet

snippet funm "function M.foo .. end" bA
function M.${1:foo}(${2:bar})
	${0}
end
endsnippet

snippet rtnt "local <tbl> .. return <tbl>" bA
local ${1:M} = {}
${0}
return $1
endsnippet

snippet ti	"table.insert(tbl, val)" b
table.insert(${1:tbl}, ${2:"${3:val}"${4}})${0}
endsnippet

snippet todo "-- TODO comment" bA
-- TODO $0
endsnippet

snippet deci	"n = n - 1" bA
${1:i} = $1 - ${2:1}
endsnippet

snippet inci	"n = n + 1" bA
${1:i} = $1 + ${2:1}
endsnippet

snippet print "print()" bA
print(${0})
endsnippet

# TODO add file detect so _spec.lua is lua.spec and move to own filetype
snippet desc "describe(string, func)" bA
describe("${1:method_name}", function()
	${0}
end)
endsnippet

snippet it "it(string, func)" bA
it("${1:Should do something}", function()
	${0}
end)
endsnippet

snippet filetype_macro_func "lua function to fun a macro"
function _G.${1:function_name}()
	-- backup register to put macro in
	local old_reg = vim.fn.getreg("a")
	local old_reg_type = vim.fn.getregtype("a")

	local macro = [[${1:ggohello}]]

	vim.fn.setreg("a", macro, old_reg_type)
	-- call with keeppatterns so not to change search history
	vim.cmd("keeppatterns normal @a")

	vim.fn.setreg("a", old_reg, old_reg_type)
end
endsnippet

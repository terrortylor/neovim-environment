snippet testtable "Create a new Test Table" b
func Test${1:Something}(t *testing.T) {
	tct := []struct {
		${2:name string}
	}{
		{${3:"Some Sub Test Instance"}},
	}
	for _, tc := range tct {
		t.Run(tc.name, func(t *testing.T) {
			${0:${VISUAL}}
		})
	}
}
endsnippet

snippet check_struct_interface "var _ Interface = Struct{}"
var _ ${1:Interface} = ${2:Struct\{\}}
endsnippet

snippet typeOf_stringer "reflect.TypeOf(list).String()"
if reflect.TypeOf(list).String() != "*widgets.List" {
	t.Fatal("Expected list to be of type *widgets.list, but got: ")
}
endsnippet

snippet package  "package NAME"
package ${0}
endsnippet

snippet benchmark "func BenchmarkXXX(t *testing.T) {}" b
func Benchmark${1:Func}(b *testing.B) {
	for i := 0; i < b.N; i++ {
		${0:${VISUAL}}
	}
}
endsnippet

snippet test "func TestXXX(t *testing.T) {}" b
func Test${1:Func}(t *testing.T) {
	${0:${VISUAL}}
}
endsnippet

snippet subtest "t.Run(..)" b
t.Run("${1:should do something}", func(t *testing.T) {
	${0:${VISUAL}}
})
endsnippet

snippet forcondition "for i <= 3" b
${1:i := 1}
for ${2:i <= 3} {
	${0:${VISUAL}}
}
endsnippet

snippet for "for i := 0; i < 10; i++" b
for ${1:i} := ${2:0}; ${3:$1 < ${4:10}}; ${5:$1++} {
	${0:${VISUAL}}
}
endsnippet

snippet forwhile "for.. untilbreak" b
for {
	${0:${VISUAL}}
	break
}
endsnippet

snippet forrange "for i, v := range somearray" b
for ${1:i}, ${2:v} := range ${3:somearray} {
	${0:${VISUAL}}
}
endsnippet

snippet else "else {...}" b
else {
	${0:${VISUAL}}
}
endsnippet
